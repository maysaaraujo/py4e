Conditional execution
=====================

Expressões Boleanas
-------------------

\index{expressões booleanas}
\index{operador lógico}
\index{expressão! booleano}
\index{operador! lógico}

Uma *expressão booleana* é uma expressão que pode ser ou verdadeira ou falsa.
Os exemplos a seguir utilizam o operador `==`,
que ao comparar dois operandos produz um resultado positivo `True`,
se forem iguais, e um resultado negativo `False`, caso contrário.

~~~~ {.python .trinket}
>>> 5 == 5
True
>>> 5 == 6
False
{}
~~~~

`True` e `False` são valores especiais que pertecem à classe `bool`;
estes elementos não são interpretados como strings;

\index{True special value}
\index{False special value}
\index{special value!True}
\index{special value!False}
\index{bool type}
\index{type!bool}
\index{valor especial True}
\index{valor especial False}
\index{tipo bool}
\index{classe bool}

~~~~ {.python}
>>> type(True)
<class 'bool'>
>>> type(False)
<class 'bool'>
~~~~

O operador `==` é um dos *operadores de comparação*;
outros operadores deste tipo são:

~~~~ {.python}
x != y               # x é diferente de y
x > y                # x é maior do que y
x < y                # x é menor do que y
x >= y               # x é maior ou igual a y
x <= y               # x é menor ou igual a y
x is y               # x é o mesmo que y
x is not y           # x não é o mesmo que y
~~~~

Por mais que estas expressões aparentem ser familiares para você,
os símbolos em python possuem uma diferença dos símbolos
utilizados na matemática para realizar as mesmas operações.
Um erro comum é utilizar-se de apenas um sinal (`=`) ao 
invés de um sinal duplo (`==`) para comparar uma igualdade.
Lembre-se que `=` é um operador de atribuição e `==` é um
operador de comparação. Vale mencionar que não há uma atribuição 
padrão aos operadores `=<` e `=>`.


\index{operator!comparison}
\index{operador de comparação}

Logical operators
-----------------

\index{logical operator}
\index{operator!logical}

There are three *logical operators*: `and`,
`or`, and `not`. The semantics (meaning) of these
operators is similar to their meaning in English. For example,

`x > 0 and x < 10`

is true only if `x` is greater than 0 *and* less than 10.

\index{and operator}
\index{or operator}
\index{not operator}
\index{operator!and}
\index{operator!or}
\index{operator!not}

`n%2 == 0 or n%3 == 0` is true if *either* of the conditions
is true, that is, if the number is divisible by 2 *or* 3.

Finally, the `not` operator negates a boolean expression, so
`not (x > y)` is true if `x > y` is false; that
is, if `x` is less than or equal to `y`.

Strictly speaking, the operands of the logical operators should be
boolean expressions, but Python is not very strict. Any nonzero number
is interpreted as "true."

~~~~ {.python}
>>> 17 and True
True
~~~~

This flexibility can be useful, but there are some subtleties to it that
might be confusing. You might want to avoid it until you are sure you
know what you are doing.

Execução condicional
---------------------
\index{declaração condicional}
\index{declaração! condicional}
\index{declaração if}
\index{declaração!if}
\index{Execuções condicionais}

A fim de  escrever programas úteis nós sempre necessitamos da abilidade de checar condições e mudar o comportamento do programa de acordo. *Declarações Condicionais* nos dão esta habilidade. A forma mais simples é a declaração `if`:

~~~~ {.python}
if x > 0 :
    print('x é positivo')
~~~~

A expressão boleana depois da declaração `if` é chamada de *condição*. Nós terminamos esta declaração com símbolo de dois pontos (:) e as linhas depois da declaração `if`são indentadas.

![If Logic](height=1.5in@../images/if)

Se a condição lógica é verdade, então a declaração que está indentada é executada. Se a condição lógica for falsa, a condição indentada é ignorada.

\index{condição}
\index{declaração composta}
\index{declaração! composta}

Declarações `if` tem a mesma com as definições de funções ou laços `for` ^[Nós aprenderemos sobre funções no Capítulo 4 e laços no Capítulo 5.]. A declaração consiste com uma linha de cabeçalho com um símbolo de dois pontos (:) seguido de um bloco indentado. Declarações como estas são chamadas de *declarações compostas*, pois elas se alongam por mais de uma linha.

Não existe limite para o número de declarações que pode-se aparecer no corpo da mesma, mas é necessária que apareça apenas uma. Ocasionalmente, é útil deixar um o corp sem condições (geralmente como um lembrete para um código que ainda não foi escrito ainda). Neste caso, você pode utilizar a declaração `pass`, que não faz nada.

\index{declaração pass}
\index{declaração!pass}

~~~~ {.python}
if x < 0 :
    pass          # necessita-se trabalhar com valores negativos!
~~~~

Se você digitar uma declaração `if` no interpretador Python, o prompt mudará de três chevrons para três pontos de modo a indicar
que você está no meio de um bloco de declaração como é mostrado abaixo:

~~~~ {.python}
>>> x = 3
>>> if x < 10:
...    print('Pequeno')
...
Pequeno
>>>
~~~~

Ao utilizar o interpretador Python, você deverá deixar uma linha em branco no final do bloco, ao contrário o Python retornará um erro:

~~~~ {.python}
>>> x = 3
>>> if x < 10:
...    print('Pequeno')
... print('Feito')
  File "<stdin>", line 3
    print('Feito')
        ^
SyntaxError: invalid syntax
~~~~

Uma linha em branco no final do bloco de declaração não é necessário quando se está escrevendo e executando o script, mas pode ser necessário para melhorar o entendimento do seu código.

Alternative execution
---------------------

\index{alternative execution}
\index{else keyword}
\index{keyword!else}

A second form of the `if` statement is *alternative
execution*, in which there are two possibilities and the
condition determines which one gets executed. The syntax looks like
this:

~~~~ {.python}
if x%2 == 0 :
    print('x is even')
else :
    print('x is odd')
~~~~

If the remainder when `x` is divided by 2 is 0, then we know
that `x` is even, and the program displays a message to that
effect. If the condition is false, the second set of statements is
executed.

![If-Then-Else Logic](height=1.5in@../images/if-else)

Since the condition must either be true or false, exactly one of the
alternatives will be executed. The alternatives are called
*branches*, because they are branches in the flow of
execution.

\index{branch}

Chained conditionals
--------------------

\index{condições encadeada}
\index{condições!encadeada}


Ás vezes há mais de duas possibilidades e precisamos de mais de dois caminhos. 
Uma maneira de expressar uma lógica computacional é através de uma *condição encadeada*:

Sometimes there are more than two possibilities and we need more than
two branches. One way to express a computation like that is a
*chained conditional*:

~~~~ {.python}
if x < y:
    print('x é menor que y')
elif x > y:
    print('x é maior que y')
else:
    print('x e y são iguais')
~~~~

`elif` é uma abreviação de "else if". Novamente, apenas um caminho será executado.

![If-Then-ElseIf Logic](height=2.0in@../images/elif)

Não há limite para o número de instruções `elif`. Se houver uma cláusula `else`, tem que ser no final, mas não há a necessidade
de que se a tenha.

\index{elif palavra-chave}
\index{palavra-chave!elif}

~~~~ {.python}
if choice == 'a':
    print('Mau Palpite')
elif choice == 'b':
    print('Bom Palpite')
elif choice == 'c':
    print('Perto, mas não está correto')
~~~~

Cada condição é verificada em ordem. Se a primeira for falsa, a próxima é verificada e assim por diante. Se uma delas for verdadeira, a ramificação correspondente será executada e a instrução terminará. Mesmo que mais de uma condição seja verdadeira, somente a primeira ramificação verdadeira é executada.


Nested conditionals
-------------------

\index{nested conditional}
\index{conditional!nested}

One conditional can also be nested within another. We could have written
the three-branch example like this:

~~~~ {.python}
if x == y:
    print('x and y are equal')
else:
    if x < y:
        print('x is less than y')
    else:
        print('x is greater than y')
~~~~

The outer conditional contains two branches. The first branch contains a
simple statement. The second branch contains another `if`
statement, which has two branches of its own. Those two branches are
both simple statements, although they could have been conditional
statements as well.

![Nested If Statements](height=2.0in@../images/nested)

Although the indentation of the statements makes the structure apparent,
*nested conditionals* become difficult to read very
quickly. In general, it is a good idea to avoid them when you can.

Logical operators often provide a way to simplify nested conditional
statements. For example, we can rewrite the following code using a
single conditional:

~~~~ {.python}
if 0 < x:
    if x < 10:
        print('x is a positive single-digit number.')
~~~~

The `print` statement is executed only if we make it past
both conditionals, so we can get the same effect with the
`and` operator:

~~~~ {.python}
if 0 < x and x < 10:
    print('x is a positive single-digit number.')
~~~~

Tratando exceções usando try e except
----------------------------------------

Anteriormente, vimos um trecho de código onde usamos as funções 
'input' e 'int' para ler e analisar um número inteiro inserido 
pelo usuário. Vimos também o quão traiçoeiro fazer isso 
poderia ser:

~~~~ {.python}
>>> prompt = "Qual é a velocidade rasante de uma andorinha sem carga?\n"
>>> velocidade = input(prompt)
Qual é a velocidade rasante de uma andorinha sem carga?
Seja mais específico, uma andorinha africana ou europeia?
>>> int(velocidade)
ValueError: invalid literal for int() with base 10:
	    (conversão literal inválida para int() com base 10)
>>>
~~~~

Quando executamos esse trecho de código no interpretador, 
nós recebemos um novo aviso do Python, pensamos "oops" e 
passamos para nossa próxima declaração.

Entretanto, se você colocar esse código num programa em Python
e esse erro ocorre, seu programa para imediatamente 
com um "Traceback" indicando tal erro. Isso faz com que os 
próximos comandos não sejam executados.

\index{traceback}

Aqui está um simples programa que converte uma temperatura 
em Fahrenheit para Celsius:

\index{fahrenheit}
\index{celsius}
\index{conversão de temperatura}

\VerbatimInput{../code3/fahren.py}

Se executarmos esse código e inserirmos uma entrada inválida, 
simplesmente ele falha com uma mensagem de erro não amigável:

~~~~
python fahren.py
Insira a temperatura em Fahrenheit:72
22.22222222222222
~~~~

~~~~
python fahren.py
Insira a temperatura em Fahrenheit:fred
Traceback (most recent call last):
  File "fahren.py", line 2, in <module>
    fahr = float(ent)
ValueError: could not convert string to float: 'fred'
            (não foi possível converter string para float: 'fred')
~~~~

Existe uma estrutura de execução condicional interna ao Python para 
manipular esses tipos de erros esperados e inesperados chamada 
"try / except". A ideia de 'try' e 'except' é de você saber que 
alguma sequencia de instruções pode ter um problema e você quer 
adicionar alguns comandos a serem executados caso um erro ocorra.
Esses comandos extra (o bloco 'except') são ignorados se não houver erro.

Você pode pensar a ferramenta 'try' e 'except' no Python como sendo 
uma "apólice de seguro" sobre uma sequencia de instruções.

Podemos reescrever nosso conversor de temperatura da seguinte forma:

\VerbatimInput{../code3/fahren2.py}

O Python começa executando a sequencia de instruções que estão 
no bloco 'try'. Se tudo ocorrer bem, pula-se o bloco 'except' 
e o programa continua. Se uma exceção ocorrer no bloco 'try',
o Python sai desse bloco e executa os comandos no bloco 'except'.

~~~~
python fahren2.py
Insira a temperatura em Fahrenheit:72
22.22222222222222
~~~~

~~~~
python fahren2.py
Insira a temperatura em Fahrenheit:fred
Por favor, insira um número
~~~~

O ato tratar uma exceção com um comando 'try' é chamado de 
*capturar* uma exceção. Nesse exemplo, a condição 'except' 
mostra uma mensagem de erro. Geralmente, capturar uma exceção 
te dá a chance de resolver um problema, ou de tentar novamente,
ou de, pelo menos, encerrar seu programa graciosamente.

Análise do curto circuito de expressões lógicas
-----------------------------------------------

\index{curto-circuito}

Quando Python está processando uma expressão lógica como `x >= 2 and
(x/y) > 2`, a expressão é analisada da esquerda para a direita.
Devido a definição de `and`, se `x` é menor
que 2, a expressão `x >= 2` é `False` e portanto
a expressão inteira é `False` independentemente se
`(x/y) > 2` é considerada como `True` ou
`False`.

Quando Python detecta que não há nada a ser ganho examinando o
resto da expressão lógica, a análise é parada e não são feitos
os cálculos no resto da expressão. Quando a
interpretação de uma expressão lógica é interrompida porque o valor geral já
é conhecido, isso é chamado *curto-circuito* na
análise.

\index{padrão guardião}
\index{padrão!guardião}

Embora isso possa parecer apenas um detalhe, o comportamento de um curto circuito leva
a uma técnica chamada de *padrão guardião*.
Considere o seguinte trecho de código no compilador de Python:

~~~~ {.python}
>>> x = 6
>>> y = 2
>>> x >= 2 and (x/y) > 2
True
>>> x = 1
>>> y = 0
>>> x >= 2 and (x/y) > 2
False
>>> x = 6
>>> y = 0
>>> x >= 2 and (x/y) > 2
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
ZeroDivisionError: division by zero
>>>
~~~~

O terceiro cálculo falhou, pois Python estava analisando
`(x/y)` e `y` era zero, causando um erro ao executar.
Mas o segundo exemplo não falhou, pois a primeira parte
da expressão `x >= 2` foi considerada `False` então
`(x/y)` nunca foi executado devido à regra do
*curto-circuito* e não houve erro.

Podemos construir a expressão lógica estrategicamente para
posicionar uma avaliação de *guarda* logo antes da avaliação que pode
causar o seguinte erro:

~~~~ {.python}
>>> x = 1
>>> y = 0
>>> x >= 2 and y != 0 and (x/y) > 2
False
>>> x = 6
>>> y = 0
>>> x >= 2 and y != 0 and (x/y) > 2
False
>>> x >= 2 and (x/y) > 2 and y != 0
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
ZeroDivisionError: division by zero
>>>
~~~~

Na primeira expressão lógica, `x >= 2` é
`False` então a análise para no `and`. Na
segunda expressão lógica, `x >= 2` é `True
mas `y != 0` é `False` então nunca chegamos em
`(x/y)`.

Na terceira expressão lógica, o `y != 0` é *depois* do
cálculo de `(x/y)` então a expressão falha com um erro.

Na segunda expressão, dizemos que `y != 0` age como uma
*guarda* para garantir que executaremos apenas `(x/y)`
se `y` é diferente de zero.

Debugging
---------

\index{debugging}
\index{traceback}

The traceback Python displays when an error occurs contains a lot of
information, but it can be overwhelming. The most useful parts are
usually:

-   What kind of error it was, and

-   Where it occurred.

Syntax errors are usually easy to find, but there are a few gotchas.
Whitespace errors can be tricky because spaces and tabs are invisible
and we are used to ignoring them.

\index{whitespace}

~~~~ {.python}
>>> x = 5
>>>  y = 6
  File "<stdin>", line 1
    y = 6
    ^
IndentationError: unexpected indent
~~~~

In this example, the problem is that the second line is indented by one
space. But the error message points to `y`, which is
misleading. In general, error messages indicate where the problem was
discovered, but the actual error might be earlier in the code, sometimes
on a previous line.

In general, error messages tell you where the problem was discovered,
but that is often not where it was caused.

Glossary
--------

body
:   The sequence of statements within a compound statement.
\index{body}

boolean expression
:   An expression whose value is either `True` or `False`.
\index{boolean expression}
\index{expression!boolean}

branch
:   One of the alternative sequences of statements in a conditional statement.
\index{branch}

chained conditional
:   A conditional statement with a series of alternative branches.
\index{chained conditional}
\index{conditional!chained}

comparison operator
:   One of the operators that compares its operands: `==`,
    `!=`, `>`, `<`, `>=`, and `<=`.

conditional statement
:   A statement that controls the flow of execution depending on some
    condition.
\index{conditional statement}
\index{statement!conditional}

condition
:   The boolean expression in a conditional statement that determines
    which branch is executed.
\index{condition}

compound statement
:   A statement that consists of a header and a body. The header ends
    with a colon (:). The body is indented relative to the header.
\index{compound statement}

guardian pattern
:   Where we construct a logical expression with additional comparisons
    to take advantage of the short-circuit behavior.
\index{guardian pattern}
\index{pattern!guardian}

logical operator
:   One of the operators that combines boolean expressions:
    `and`, `or`, and `not`.

nested conditional
:   A conditional statement that appears in one of the branches of
    another conditional statement.
\index{nested conditional}
\index{conditional!nested}

traceback
:   A list of the functions that are executing, printed when an
    exception occurs.
\index{traceback}

short circuit
:   When Python is part-way through evaluating a logical expression and
    stops the evaluation because Python knows the final value for the
    expression without needing to evaluate the rest of the expression.
\index{short circuit}

Exercícios 
---------

**Exercício 1: Reescreve sua rotina computacional de pagamento para pagar ao funcionário que trabalhar por mais de 40 horas 1.5 vezes o valor da taxa de pagamento por hora**


~~~~
Escreva as Horas: 45
Escreva a taxa: 10
Pagamento : 475.0
~~~~

**Exercício 2: Reescreva seu programa de pagamento utilizando `try` e `except`de forma que o programa consiga lidar com entradas não numéricas graciosamente mostrando uma mensagem e saindo do programa. A seguir é mostrado duas execuções do programa**


~~~~
Escreva as Horas: 20
Escreva a taxa: nove
Erro, por favor utilize uma entrada numérica 
~~~~

~~~~
Escreva as Horas: 20
Erro, por favor utilize uma entrada numérica 
~~~~

**Exercício 3: Escreva um programa que peça por uma pontuação entre 0.0 e 1.0.
Se a pontuação for fora do intervalo, mostre uma mensagem de erro. Se a pontuação estiver entre 0.0 e 1.0, mostre a pontuação usando a seguinte tabela**

~~~~
Pontuação    Nota
>= 0.9        A
>= 0.8        B
>= 0.7        C
>= 0.6        D
 < 0.6        F
~~~~

~~~~
Digite a Pontuação: 0.95
A
~~~~

~~~~
Digite a Pontuação: perfeito
Má Pontuação
~~~~

~~~~
Digite a Pontuação: 10.0
Má Pontuação
~~~~

~~~~
Digite a Pontuação: 0.75
C
~~~~

~~~~
Digite a Pontuação: 0.5
F
~~~~
Rode o programa repetidamente como mostrado acima para testar diferentes valores de entrada.
